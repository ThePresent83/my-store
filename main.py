import logging
import asyncio
import os
import aiohttp
import aiofiles
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto
from aiohttp import ClientSession
from config import categories

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = "7537757612:AAEoWw6r90wtEEGF-oHExCK5HP-4VbldZIs"
MOYSKLAD_API_TOKEN = "0a553d37e279a0c9c6dda0b1b19ff3837d4a6247"
ADMIN_ID = 5190704339
BASE_URL = "https://api.moysklad.ru/api/remap/1.2"
TEMP_FOLDER = "C:\\Users\\BugBuster\\Documents\\my-store\\IMG_SOURCE\\"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs(TEMP_FOLDER, exist_ok=True)

HEADERS = {
    "Authorization": f"Bearer {MOYSKLAD_API_TOKEN}",
    "Content-Type": "application/json"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"), KeyboardButton(text="üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –∫–æ–¥—É")]
    ],
    resize_keyboard=True
)

MAX_MESSAGE_LENGTH = 4096

async def is_admin(message: types.Message):
    return message.from_user.id == ADMIN_ID

async def send_message_in_parts(message, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏."""
    if len(text) > MAX_MESSAGE_LENGTH:
        parts = [text[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(text), MAX_MESSAGE_LENGTH)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(text)

async def get_product_info_and_stock(category_pathname):
    product_url = f'{BASE_URL}/entity/product?filter=pathName={category_pathname}'
    stock_url = f'{BASE_URL}/report/stock/bystore/current'

    async with ClientSession() as session:
        try:
            async with session.get(product_url, headers=HEADERS) as response:
                response_data = await response.json()
                if response.status != 200:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {response_data}"

                products = response_data.get('rows', [])
                if not products:
                    return "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."

                product_info = ""
                for product in products:
                    product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    stock_params = {'filter': f"assortmentId={product.get('id')}", 'withRecalculate': 'true'}
                    async with session.get(stock_url, headers=HEADERS, params=stock_params) as stock_response:
                        stock_data = await stock_response.json()
                        stock_quantity = stock_data[0].get('stock', 0) if stock_data else 0
                    if stock_quantity <= 0:
                        continue
                    sale_prices = product.get('salePrices', [])
                    valid_price = next((price.get('value', 0) / 100 for price in sale_prices if price.get('value')), None)
                    product_info += f"–¢–æ–≤–∞—Ä: {product_name}\n–¶–µ–Ω–∞: {valid_price} —Ç–≥\n–û—Å—Ç–∞—Ç–∫–∏: {stock_quantity} —à—Ç\n\n"

                return product_info if product_info else "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º."
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."

async def find_product_by_code(code_part):
    url = f"{BASE_URL}/entity/product?filter=code~{code_part}&limit=1"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=HEADERS) as response:
                if response.status == 200:
                    data = await response.json()
                    rows = data.get("rows", [])
                    if rows:
                        return rows[0]
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
    return None

async def get_product_images(product):
    url_product = f"{product['meta']['href']}?expand=images&limit=100"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url_product, headers=HEADERS) as response:
                if response.status == 200:
                    product_data = await response.json()
                    return [img["meta"]["downloadHref"] for img in product_data.get("images", {}).get("rows", [])]
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    return []

async def download_image(url, filename):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=HEADERS) as response:
                if response.status == 200:
                    filepath = os.path.join(TEMP_FOLDER, filename)
                    async with aiofiles.open(filepath, "wb") as file:
                        await file.write(await response.read())
                    return filepath
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if await is_admin(message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")

@dp.message(lambda message: message.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")
async def send_categories(message: types.Message):
    if not await is_admin(message):
        return
    category_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=category)] for category in categories.keys()],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)

@dp.message(lambda message: message.text in categories.keys())
async def send_stock_by_category(message: types.Message):
    if not await is_admin(message):
        return
    category_pathname = message.text.strip()
    product_info = await get_product_info_and_stock(category_pathname)
    await send_message_in_parts(message, product_info)

@dp.message(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –∫–æ–¥—É")
async def find_product(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞:")

@dp.message()
async def handle_product_search(message: types.Message):
    code_part = message.text.strip()
    product = await find_product_by_code(code_part)
    if not product:
        await message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    product_name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    product_pathname = product.get("pathName", "–ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
    product_info_text = f"üõí <b>{product_name}</b>\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_pathname}"

    images = await get_product_images(product)
    if images:
        tasks = [download_image(url, f"product_{code_part}_{idx}.jpg") for idx, url in enumerate(images)]
        downloaded_files = await asyncio.gather(*tasks)
        media_group = [InputMediaPhoto(media=FSInputFile(filepath)) for filepath in downloaded_files if filepath]
        if media_group:
            await message.answer(product_info_text, parse_mode="HTML")
            await bot.send_media_group(message.chat.id, media=media_group)
        for filepath in downloaded_files:
            if filepath and os.path.exists(filepath):
                os.remove(filepath)
    else:
        await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

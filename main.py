import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiohttp import ClientSession

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "7537757612:AAEoWw6r90wtEEGF-oHExCK5HP-4VbldZIs"
MOYSKLAD_API_TOKEN = "c09864436c8f3c3d056dd588dc5ffb12c2131db7"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω API –ú–æ–π–°–∫–ª–∞–¥
ADMIN_ID = 5190704339  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")]
    ],
    resize_keyboard=True
)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(message: types.Message):
    return message.from_user.id == ADMIN_ID


MAX_MESSAGE_LENGTH = 4096


async def send_message_in_parts(message, stock_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏."""
    stock_data_str = str(stock_data)

    # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(stock_data_str) > MAX_MESSAGE_LENGTH:
        parts = [stock_data_str[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(stock_data_str), MAX_MESSAGE_LENGTH)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(stock_data_str)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def get_categories(category_id=None):
    url = "https://api.moysklad.ru/api/remap/1.2/entity/productfolder"  # –≠–Ω–¥–ø–æ–∏–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    headers = {
        "Authorization": f"Bearer {MOYSKLAD_API_TOKEN}",
        "Content-Type": "application/json"
    }
    params = {
        "limit": 100,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    }

    if category_id:
        params["filter"] = f"productFolder.id={category_id}"
        params["withSubFolders"] = "true"

    async with ClientSession() as session:
        try:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    categories = {item["name"]: item["id"] for item in data.get("rows", [])}
                    return categories
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")
                    return {}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return {}


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def get_stock_by_category(category_id):
    url = "https://api.moysklad.ru/api/remap/1.2/report/stock/all"  # –≠–Ω–¥–ø–æ–∏–Ω—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤
    headers = {
        "Authorization": f"Bearer {MOYSKLAD_API_TOKEN}",
        "Content-Type": "application/json"
    }

    async with ClientSession() as session:
        try:
            logging.info(f"–ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID: {category_id}")
            async with session.get(url, headers=headers) as response:
                response_data = await response.json()
                logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: –°—Ç–∞—Ç—É—Å - {response.status}, –¢–µ–ª–æ - {response_data}")

                if response.status == 200:
                    stock_info = f"üì¶ –û—Å—Ç–∞—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}:\n"
                    no_category_info = "–¢–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"

                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    for item in response_data.get("rows", {}):
                        item_name = item.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
                        stock = item.get("stock", 0)  # –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
                        folder_id = item.get("productfolder", {}).get("id", None)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞

                        logging.info(f"–¢–æ–≤–∞—Ä: {item_name}, –û—Å—Ç–∞—Ç–æ–∫: {stock}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {folder_id}")

                        if folder_id == category_id and stock > 0:
                            stock_info += f"üîπ {item_name}: {stock} —à—Ç.\n"
                        elif folder_id is None and stock > 0:
                            no_category_info += f"üîπ {item_name}: {stock} —à—Ç.\n"

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if stock_info != f"üì¶ –û—Å—Ç–∞—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}:\n":
                        stock_info += "\n"
                    if no_category_info != "–¢–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n":
                        no_category_info += "\n"

                    if stock_info != f"üì¶ –û—Å—Ç–∞—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}:\n":
                        return stock_info
                    elif no_category_info != "–¢–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n":
                        return no_category_info
                    else:
                        return "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–æ–º."
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {response.status}")
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç—É—Å: {response.status}"

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if await is_admin(message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ"
@dp.message(lambda message: message.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")
async def send_categories(message: types.Message):
    if not await is_admin(message):
        return
    categories = await get_categories()
    if categories:
        category_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=category)] for category in categories.keys()],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message()
async def send_stock_by_category(message: types.Message):
    if not await is_admin(message):
        return
    categories = await get_categories()
    category_id = categories.get(message.text)
    if category_id:
        stock_data = await get_stock_by_category(category_id)
        await send_message_in_parts(message, stock_data)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@dp.message(lambda message: message.text == "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
async def subscribe_newsletter(message: types.Message):
    if not await is_admin(message):
        return
    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())